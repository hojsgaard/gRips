// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gRips.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// setdiff_
arma::uvec setdiff_(arma::uvec x, arma::uvec y);
RcppExport SEXP _gRips_setdiff_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(setdiff_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rep_nout
arma::vec rep_nout(vec x, unsigned int nout);
RcppExport SEXP _gRips_rep_nout(SEXP xSEXP, SEXP noutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nout(noutSEXP);
    rcpp_result_gen = Rcpp::wrap(rep_nout(x, nout));
    return rcpp_result_gen;
END_RCPP
}
// vec2mat
arma::mat vec2mat(arma::vec x, int nrow, int ncol);
RcppExport SEXP _gRips_vec2mat(SEXP xSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2mat(x, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// remove_elem
arma::vec remove_elem(arma::vec X, arma::uvec ent_, int shift);
RcppExport SEXP _gRips_remove_elem(SEXP XSEXP, SEXP ent_SEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ent_(ent_SEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_elem(X, ent_, shift));
    return rcpp_result_gen;
END_RCPP
}
// extract_elem
arma::vec extract_elem(arma::vec X, arma::uvec ent_, int shift);
RcppExport SEXP _gRips_extract_elem(SEXP XSEXP, SEXP ent_SEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ent_(ent_SEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_elem(X, ent_, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_elem
arma::vec replace_elem(arma::vec X, arma::uvec ent_, arma::vec value_, int shift);
RcppExport SEXP _gRips_replace_elem(SEXP XSEXP, SEXP ent_SEXP, SEXP value_SEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ent_(ent_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value_(value_SEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_elem(X, ent_, value_, shift));
    return rcpp_result_gen;
END_RCPP
}
// remove_rows
arma::mat remove_rows(arma::mat X, arma::uvec row_ent_, int shift);
RcppExport SEXP _gRips_remove_rows(SEXP XSEXP, SEXP row_ent_SEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type row_ent_(row_ent_SEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_rows(X, row_ent_, shift));
    return rcpp_result_gen;
END_RCPP
}
// extract_rows
arma::mat extract_rows(arma::mat X, arma::uvec row_ent_, int shift);
RcppExport SEXP _gRips_extract_rows(SEXP XSEXP, SEXP row_ent_SEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type row_ent_(row_ent_SEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_rows(X, row_ent_, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_rows
arma::mat replace_rows(arma::mat X, arma::uvec row_ent_, arma::vec value, int shift);
RcppExport SEXP _gRips_replace_rows(SEXP XSEXP, SEXP row_ent_SEXP, SEXP valueSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type row_ent_(row_ent_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_rows(X, row_ent_, value, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_u_vc
arma::mat replace_u_vc(arma::mat& M, arma::uvec u, arma::uvec v, arma::vec value, int shift);
RcppExport SEXP _gRips_replace_u_vc(SEXP MSEXP, SEXP uSEXP, SEXP vSEXP, SEXP valueSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_u_vc(M, u, v, value, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_uc_v
arma::mat replace_uc_v(arma::mat& M, arma::uvec u, arma::uvec v, arma::vec value, int shift);
RcppExport SEXP _gRips_replace_uc_v(SEXP MSEXP, SEXP uSEXP, SEXP vSEXP, SEXP valueSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_uc_v(M, u, v, value, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_uc_vc
arma::mat replace_uc_vc(arma::mat& M, arma::uvec u, arma::uvec v, arma::vec value, int shift);
RcppExport SEXP _gRips_replace_uc_vc(SEXP MSEXP, SEXP uSEXP, SEXP vSEXP, SEXP valueSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_uc_vc(M, u, v, value, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_u_v
arma::mat replace_u_v(arma::mat& M, arma::uvec u, arma::uvec v, arma::vec value, int shift);
RcppExport SEXP _gRips_replace_u_v(SEXP MSEXP, SEXP uSEXP, SEXP vSEXP, SEXP valueSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_u_v(M, u, v, value, shift));
    return rcpp_result_gen;
END_RCPP
}
// replace_uv_
arma::mat replace_uv_(arma::mat& M, arma::ivec u, arma::ivec v, arma::vec value, int shift);
RcppExport SEXP _gRips_replace_uv_(SEXP MSEXP, SEXP uSEXP, SEXP vSEXP, SEXP valueSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_uv_(M, u, v, value, shift));
    return rcpp_result_gen;
END_RCPP
}
// as_colvec
void as_colvec(arma::mat& M);
RcppExport SEXP _gRips_as_colvec(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    as_colvec(M);
    return R_NilValue;
END_RCPP
}
// extract_uv_
arma::mat extract_uv_(arma::mat& M, arma::ivec u, arma::ivec v, int shift);
RcppExport SEXP _gRips_extract_uv_(SEXP MSEXP, SEXP uSEXP, SEXP vSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_uv_(M, u, v, shift));
    return rcpp_result_gen;
END_RCPP
}
// max_abs_
double max_abs_(const mat& S);
static SEXP _gRips_max_abs__try(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_(S));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_(SEXP SSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs__try(SSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diag_
double max_abs_diag_(const mat& S);
static SEXP _gRips_max_abs_diag__try(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diag_(S));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diag_(SEXP SSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diag__try(SSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diff_rel_
double max_abs_diff_rel_(const mat& S, const mat& Sigma);
static SEXP _gRips_max_abs_diff_rel__try(SEXP SSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diff_rel_(S, Sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diff_rel_(SEXP SSEXP, SEXP SigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diff_rel__try(SSEXP, SigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diff_
double max_abs_diff_(const mat& S, const mat& Sigma);
static SEXP _gRips_max_abs_diff__try(SEXP SSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diff_(S, Sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diff_(SEXP SSEXP, SEXP SigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diff__try(SSEXP, SigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diag_diff_
double max_abs_diag_diff_(const mat& S, const mat& Sigma);
static SEXP _gRips_max_abs_diag_diff__try(SEXP SSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diag_diff_(S, Sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diag_diff_(SEXP SSEXP, SEXP SigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diag_diff__try(SSEXP, SigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_diag_diff_
double max_diag_diff_(const mat& S, const mat& Sigma);
static SEXP _gRips_max_diag_diff__try(SEXP SSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(max_diag_diff_(S, Sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_diag_diff_(SEXP SSEXP, SEXP SigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_diag_diff__try(SSEXP, SigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// califa_
double califa_(const mat& S, const mat& Sigma, const mat& Sigmaold);
static SEXP _gRips_califa__try(SEXP SSEXP, SEXP SigmaSEXP, SEXP SigmaoldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigmaold(SigmaoldSEXP);
    rcpp_result_gen = Rcpp::wrap(califa_(S, Sigma, Sigmaold));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_califa_(SEXP SSEXP, SEXP SigmaSEXP, SEXP SigmaoldSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_califa__try(SSEXP, SigmaSEXP, SigmaoldSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// diff_on_Emat_
vec diff_on_Emat_(const mat& S, const mat& Sigma, const umat& E, int shift);
static SEXP _gRips_diff_on_Emat__try(SEXP SSEXP, SEXP SigmaSEXP, SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const umat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_on_Emat_(S, Sigma, E, shift));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_diff_on_Emat_(SEXP SSEXP, SEXP SigmaSEXP, SEXP ESEXP, SEXP shiftSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_diff_on_Emat__try(SSEXP, SigmaSEXP, ESEXP, shiftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// diff_on_Elist_
vec diff_on_Elist_(const mat& S, const mat& Sigma, const List& E, int shift);
static SEXP _gRips_diff_on_Elist__try(SEXP SSEXP, SEXP SigmaSEXP, SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const List& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_on_Elist_(S, Sigma, E, shift));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_diff_on_Elist_(SEXP SSEXP, SEXP SigmaSEXP, SEXP ESEXP, SEXP shiftSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_diff_on_Elist__try(SSEXP, SigmaSEXP, ESEXP, shiftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diff_on_Emat_
double max_abs_diff_on_Emat_(const mat& Sigma, const mat& S, const umat& E, int shift);
static SEXP _gRips_max_abs_diff_on_Emat__try(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const umat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diff_on_Emat_(Sigma, S, E, shift));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diff_on_Emat_(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diff_on_Emat__try(SigmaSEXP, SSEXP, ESEXP, shiftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mean_abs_diff_on_Emat_
double mean_abs_diff_on_Emat_(const mat& Sigma, const mat& S, const umat& E, int shift);
static SEXP _gRips_mean_abs_diff_on_Emat__try(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const umat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_abs_diff_on_Emat_(Sigma, S, E, shift));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_mean_abs_diff_on_Emat_(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_mean_abs_diff_on_Emat__try(SigmaSEXP, SSEXP, ESEXP, shiftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diff_on_Elist_
double max_abs_diff_on_Elist_(const mat& Sigma, const mat& S, const List& E, int shift);
static SEXP _gRips_max_abs_diff_on_Elist__try(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const List& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diff_on_Elist_(Sigma, S, E, shift));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diff_on_Elist_(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diff_on_Elist__try(SigmaSEXP, SSEXP, ESEXP, shiftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mean_abs_diff_on_Elist_
double mean_abs_diff_on_Elist_(const mat& Sigma, const mat& S, const List& E, int shift);
static SEXP _gRips_mean_abs_diff_on_Elist__try(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const List& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_abs_diff_on_Elist_(Sigma, S, E, shift));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_mean_abs_diff_on_Elist_(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP, SEXP shiftSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_mean_abs_diff_on_Elist__try(SigmaSEXP, SSEXP, ESEXP, shiftSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_diff_on_Emat_
double max_diff_on_Emat_(const mat& Sigma, const mat& S, const mat& E);
static SEXP _gRips_max_diff_on_Emat__try(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type E(ESEXP);
    rcpp_result_gen = Rcpp::wrap(max_diff_on_Emat_(Sigma, S, E));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_diff_on_Emat_(SEXP SigmaSEXP, SEXP SSEXP, SEXP ESEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_diff_on_Emat__try(SigmaSEXP, SSEXP, ESEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// max_abs_diff_on_EK_
double max_abs_diff_on_EK_(const mat& S, const mat& Sigma, const mat& E, const mat& K);
static SEXP _gRips_max_abs_diff_on_EK__try(SEXP SSEXP, SEXP SigmaSEXP, SEXP ESEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const mat& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(max_abs_diff_on_EK_(S, Sigma, E, K));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_max_abs_diff_on_EK_(SEXP SSEXP, SEXP SigmaSEXP, SEXP ESEXP, SEXP KSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_max_abs_diff_on_EK__try(SSEXP, SigmaSEXP, ESEXP, KSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// make_clist_
List make_clist_(arma::mat& S, List& edges);
RcppExport SEXP _gRips_make_clist_(SEXP SSEXP, SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(make_clist_(S, edges));
    return rcpp_result_gen;
END_RCPP
}
// Scc_inv_list_
List Scc_inv_list_(const mat& S, const List& edges0);
RcppExport SEXP _gRips_Scc_inv_list_(SEXP SSEXP, SEXP edges0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const List& >::type edges0(edges0SEXP);
    rcpp_result_gen = Rcpp::wrap(Scc_inv_list_(S, edges0));
    return rcpp_result_gen;
END_RCPP
}
// Scc_list_
List Scc_list_(const mat& S, const List& edges0);
RcppExport SEXP _gRips_Scc_list_(SEXP SSEXP, SEXP edges0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const List& >::type edges0(edges0SEXP);
    rcpp_result_gen = Rcpp::wrap(Scc_list_(S, edges0));
    return rcpp_result_gen;
END_RCPP
}
// conips_ggm_
List conips_ggm_(arma::mat& S, List& Elist, umat& Emat, int& nobs, arma::mat K, int& iter, double& eps, int& convcrit, int& print, List& aux);
RcppExport SEXP _gRips_conips_ggm_(SEXP SSEXP, SEXP ElistSEXP, SEXP EmatSEXP, SEXP nobsSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP epsSEXP, SEXP convcritSEXP, SEXP printSEXP, SEXP auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type Elist(ElistSEXP);
    Rcpp::traits::input_parameter< umat& >::type Emat(EmatSEXP);
    Rcpp::traits::input_parameter< int& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int& >::type convcrit(convcritSEXP);
    Rcpp::traits::input_parameter< int& >::type print(printSEXP);
    Rcpp::traits::input_parameter< List& >::type aux(auxSEXP);
    rcpp_result_gen = Rcpp::wrap(conips_ggm_(S, Elist, Emat, nobs, K, iter, eps, convcrit, print, aux));
    return rcpp_result_gen;
END_RCPP
}
// covips_ggm_
List covips_ggm_(mat& S, List& Elist, umat& Emat, int& nobs, mat K, int& iter, double& eps, int& convcrit, int& print, List& aux);
RcppExport SEXP _gRips_covips_ggm_(SEXP SSEXP, SEXP ElistSEXP, SEXP EmatSEXP, SEXP nobsSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP epsSEXP, SEXP convcritSEXP, SEXP printSEXP, SEXP auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type Elist(ElistSEXP);
    Rcpp::traits::input_parameter< umat& >::type Emat(EmatSEXP);
    Rcpp::traits::input_parameter< int& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int& >::type convcrit(convcritSEXP);
    Rcpp::traits::input_parameter< int& >::type print(printSEXP);
    Rcpp::traits::input_parameter< List& >::type aux(auxSEXP);
    rcpp_result_gen = Rcpp::wrap(covips_ggm_(S, Elist, Emat, nobs, K, iter, eps, convcrit, print, aux));
    return rcpp_result_gen;
END_RCPP
}
// as_emat2amat_
mat as_emat2amat_(umat emat, int d);
RcppExport SEXP _gRips_as_emat2amat_(SEXP ematSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type emat(ematSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(as_emat2amat_(emat, d));
    return rcpp_result_gen;
END_RCPP
}
// as_emat_complement_
umat as_emat_complement_(umat emat, int d, int shift);
RcppExport SEXP _gRips_as_emat_complement_(SEXP ematSEXP, SEXP dSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type emat(ematSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(as_emat_complement_(emat, d, shift));
    return rcpp_result_gen;
END_RCPP
}
// inv_qr_
mat inv_qr_(mat& X);
RcppExport SEXP _gRips_inv_qr_(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_qr_(X));
    return rcpp_result_gen;
END_RCPP
}
// diff_fun_
double diff_fun_(mat& Sigma, mat& K, umat emc);
RcppExport SEXP _gRips_diff_fun_(SEXP SigmaSEXP, SEXP KSEXP, SEXP emcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< umat >::type emc(emcSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_fun_(Sigma, K, emc));
    return rcpp_result_gen;
END_RCPP
}
// outerloop1_
List outerloop1_(mat& Sigma, mat& K, umat& Emat, umat& Emat_c, mat& amat, int& nobs, double& eps, int& maxit, int print);
RcppExport SEXP _gRips_outerloop1_(SEXP SigmaSEXP, SEXP KSEXP, SEXP EmatSEXP, SEXP Emat_cSEXP, SEXP amatSEXP, SEXP nobsSEXP, SEXP epsSEXP, SEXP maxitSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< umat& >::type Emat(EmatSEXP);
    Rcpp::traits::input_parameter< umat& >::type Emat_c(Emat_cSEXP);
    Rcpp::traits::input_parameter< mat& >::type amat(amatSEXP);
    Rcpp::traits::input_parameter< int& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(outerloop1_(Sigma, K, Emat, Emat_c, amat, nobs, eps, maxit, print));
    return rcpp_result_gen;
END_RCPP
}
// ncd_ggm_
List ncd_ggm_(mat& S, List& Elist, umat& Emat, int& nobs, mat K, int& iter, double& eps, int& convcrit, int print, List& aux);
RcppExport SEXP _gRips_ncd_ggm_(SEXP SSEXP, SEXP ElistSEXP, SEXP EmatSEXP, SEXP nobsSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP epsSEXP, SEXP convcritSEXP, SEXP printSEXP, SEXP auxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type Elist(ElistSEXP);
    Rcpp::traits::input_parameter< umat& >::type Emat(EmatSEXP);
    Rcpp::traits::input_parameter< int& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int& >::type convcrit(convcritSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    Rcpp::traits::input_parameter< List& >::type aux(auxSEXP);
    rcpp_result_gen = Rcpp::wrap(ncd_ggm_(S, Elist, Emat, nobs, K, iter, eps, convcrit, print, aux));
    return rcpp_result_gen;
END_RCPP
}
// unique_rows
arma::mat unique_rows(const arma::mat& m);
RcppExport SEXP _gRips_unique_rows(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_rows(m));
    return rcpp_result_gen;
END_RCPP
}
// unique_cols
arma::mat unique_cols(const arma::mat& m);
RcppExport SEXP _gRips_unique_cols(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_cols(m));
    return rcpp_result_gen;
END_RCPP
}
// clone_
SEXP clone_(SEXP& x);
RcppExport SEXP _gRips_clone_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(clone_(x));
    return rcpp_result_gen;
END_RCPP
}
// list_names_
chr_vec list_names_(List lst);
RcppExport SEXP _gRips_list_names_(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(list_names_(lst));
    return rcpp_result_gen;
END_RCPP
}
// find_str_
int find_str_(const char* st, chr_vec x);
RcppExport SEXP _gRips_find_str_(SEXP stSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type st(stSEXP);
    Rcpp::traits::input_parameter< chr_vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(find_str_(st, x));
    return rcpp_result_gen;
END_RCPP
}
// list2Emat_
arma::mat list2Emat_(const List& E, int shift);
RcppExport SEXP _gRips_list2Emat_(SEXP ESEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(list2Emat_(E, shift));
    return rcpp_result_gen;
END_RCPP
}
// ggm_logL_
double ggm_logL_(mat& S, mat& K, int nobs);
RcppExport SEXP _gRips_ggm_logL_(SEXP SSEXP, SEXP KSEXP, SEXP nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(ggm_logL_(S, K, nobs));
    return rcpp_result_gen;
END_RCPP
}
// list2row_
Rcpp::NumericMatrix list2row_(Rcpp::List input_list, int d);
static SEXP _gRips_list2row__try(SEXP input_listSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type input_list(input_listSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(list2row_(input_list, d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_list2row_(SEXP input_listSEXP, SEXP dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_list2row__try(input_listSEXP, dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// list2col_
Rcpp::NumericMatrix list2col_(Rcpp::List input_list, int d);
static SEXP _gRips_list2col__try(SEXP input_listSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type input_list(input_listSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(list2col_(input_list, d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _gRips_list2col_(SEXP input_listSEXP, SEXP dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_gRips_list2col__try(input_listSEXP, dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _gRips_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*max_abs_)(const mat&)");
        signatures.insert("double(*max_abs_diag_)(const mat&)");
        signatures.insert("double(*max_abs_diff_rel_)(const mat&,const mat&)");
        signatures.insert("double(*max_abs_diff_)(const mat&,const mat&)");
        signatures.insert("double(*max_abs_diag_diff_)(const mat&,const mat&)");
        signatures.insert("double(*max_diag_diff_)(const mat&,const mat&)");
        signatures.insert("double(*califa_)(const mat&,const mat&,const mat&)");
        signatures.insert("vec(*diff_on_Emat_)(const mat&,const mat&,const umat&,int)");
        signatures.insert("vec(*diff_on_Elist_)(const mat&,const mat&,const List&,int)");
        signatures.insert("double(*max_abs_diff_on_Emat_)(const mat&,const mat&,const umat&,int)");
        signatures.insert("double(*mean_abs_diff_on_Emat_)(const mat&,const mat&,const umat&,int)");
        signatures.insert("double(*max_abs_diff_on_Elist_)(const mat&,const mat&,const List&,int)");
        signatures.insert("double(*mean_abs_diff_on_Elist_)(const mat&,const mat&,const List&,int)");
        signatures.insert("double(*max_diff_on_Emat_)(const mat&,const mat&,const mat&)");
        signatures.insert("double(*max_abs_diff_on_EK_)(const mat&,const mat&,const mat&,const mat&)");
        signatures.insert("Rcpp::NumericMatrix(*list2row_)(Rcpp::List,int)");
        signatures.insert("Rcpp::NumericMatrix(*list2col_)(Rcpp::List,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _gRips_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gRips", "_gRips_max_abs_", (DL_FUNC)_gRips_max_abs__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diag_", (DL_FUNC)_gRips_max_abs_diag__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diff_rel_", (DL_FUNC)_gRips_max_abs_diff_rel__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diff_", (DL_FUNC)_gRips_max_abs_diff__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diag_diff_", (DL_FUNC)_gRips_max_abs_diag_diff__try);
    R_RegisterCCallable("gRips", "_gRips_max_diag_diff_", (DL_FUNC)_gRips_max_diag_diff__try);
    R_RegisterCCallable("gRips", "_gRips_califa_", (DL_FUNC)_gRips_califa__try);
    R_RegisterCCallable("gRips", "_gRips_diff_on_Emat_", (DL_FUNC)_gRips_diff_on_Emat__try);
    R_RegisterCCallable("gRips", "_gRips_diff_on_Elist_", (DL_FUNC)_gRips_diff_on_Elist__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diff_on_Emat_", (DL_FUNC)_gRips_max_abs_diff_on_Emat__try);
    R_RegisterCCallable("gRips", "_gRips_mean_abs_diff_on_Emat_", (DL_FUNC)_gRips_mean_abs_diff_on_Emat__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diff_on_Elist_", (DL_FUNC)_gRips_max_abs_diff_on_Elist__try);
    R_RegisterCCallable("gRips", "_gRips_mean_abs_diff_on_Elist_", (DL_FUNC)_gRips_mean_abs_diff_on_Elist__try);
    R_RegisterCCallable("gRips", "_gRips_max_diff_on_Emat_", (DL_FUNC)_gRips_max_diff_on_Emat__try);
    R_RegisterCCallable("gRips", "_gRips_max_abs_diff_on_EK_", (DL_FUNC)_gRips_max_abs_diff_on_EK__try);
    R_RegisterCCallable("gRips", "_gRips_list2row_", (DL_FUNC)_gRips_list2row__try);
    R_RegisterCCallable("gRips", "_gRips_list2col_", (DL_FUNC)_gRips_list2col__try);
    R_RegisterCCallable("gRips", "_gRips_RcppExport_validate", (DL_FUNC)_gRips_RcppExport_validate);
    return R_NilValue;
}
